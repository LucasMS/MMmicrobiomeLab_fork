library("RColorBrewer")
library("gProfileR")
library("genefilter")
load("C:/Users/brovo/Documents/BRCA.RData")
View(query_TCGA)
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
platform = "Illumina MiSeq",
file.type = "TSV",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
View(query_TCGA[[1]][[1]])
View(query_TCGA[[1]][[1]])
brca_res = getResults(query_TCGA)
head(brca_res$cases)
print(brca_res$cases)
listSamples <- c("TCGA-A7-A13D-01A-13R-A277-07", "TCGA-A7-A13D-01B-04R-A277-07",
"TCGA-B6-A401-01A-11R-A239-07", "TCGA-D8-A1X8-01A-11R-A14M-07",
"TCGA-AC-A23C-01A-12R-A169-07", "TCGA-BH-A18H-01A-11R-A12D-07",
"TCGA-5L-AAT0-01A-12R-A41B-07", "TCGA-BH-A202-01A-11R-A14M-07",
"TCGA-D8-A1XW-01A-11R-A14M-07", "TCGA-EW-A2FR-01A-11R-A21T-07",
"TCGA-A8-A07C-01A-11R-A034-07", "TCGA-EW-A1PB-01A-11R-A144-07",
"TCGA-AC-A2FM-01A-11R-A19W-07", "TCGA-AC-A2FM-11B-32R-A19W-07",
"TCGA-E2-A105-01A-11R-A10J-07", "TCGA-AR-A1AX-01A-11R-A12P-07",
"TCGA-EW-A1OW-01A-21R-A144-07", "TCGA-AC-A2FO-01A-11R-A180-07",
"TCGA-BH-A0HQ-01A-11R-A034-07", "TCGA-A2-A04R-01A-41R-A109-07")
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
file.type = "TSV",
data.type = "Gene Expression Quantification",
barcode = listSamples,
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
listSamples <- c(|00063026-2a67-41de-b105-f80dca277978.rna_seq.augmented_star_gene_counts.tsv,
00a26384-1b1c-4db4-9664-75fb9b3febdb.rna_seq.augmented_star_gene_counts.tsv,
01661d94-fc16-4456-95cf-a5fa4e1e196c.rna_seq.augmented_star_gene_counts.tsv,
01900aab-4c12-4198-b41f-ff638e5abe3b.rna_seq.augmented_star_gene_counts.tsv,
01ae5613-1c58-4d02-8fd3-47d35d71c22d.rna_seq.augmented_star_gene_counts.tsv,
01f6286b-8422-4f16-bec3-871c86396790.rna_seq.augmented_star_gene_counts.tsv,
021d9e06-9d27-400c-8776-08e89c817b46.rna_seq.augmented_star_gene_counts.tsv,
02423743-43b4-494b-acd9-1cd3bcd3d395.rna_seq.augmented_star_gene_counts.tsv,
02a4ccea-1464-4664-bc44-bb6569a34608.rna_seq.augmented_star_gene_counts.tsv,
02a50d1b-ff62-4936-a0ce-ac0e22a5b41c.rna_seq.augmented_star_gene_counts.tsv)
listSamples <- c("00063026-2a67-41de-b105-f80dca277978.rna_seq.augmented_star_gene_counts.tsv",
"00a26384-1b1c-4db4-9664-75fb9b3febdb.rna_seq.augmented_star_gene_counts.tsv",
"01661d94-fc16-4456-95cf-a5fa4e1e196c.rna_seq.augmented_star_gene_counts.tsv",
"01900aab-4c12-4198-b41f-ff638e5abe3b.rna_seq.augmented_star_gene_counts.tsv",
"01ae5613-1c58-4d02-8fd3-47d35d71c22d.rna_seq.augmented_star_gene_counts.tsv",
"01f6286b-8422-4f16-bec3-871c86396790.rna_seq.augmented_star_gene_counts.tsv",
"021d9e06-9d27-400c-8776-08e89c817b46.rna_seq.augmented_star_gene_counts.tsv",
"02423743-43b4-494b-acd9-1cd3bcd3d395.rna_seq.augmented_star_gene_counts.tsv",
"02a4ccea-1464-4664-bc44-bb6569a34608.rna_seq.augmented_star_gene_counts.tsv",
"02a50d1b-ff62-4936-a0ce-ac0e22a5b41c.rna_seq.augmented_star_gene_counts.tsv")
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
file.type = "TSV",
data.type = "Gene Expression Quantification",
barcode = listSamples,
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
file.type = "TSV",
data.type = "Gene Expression Quantification",
barcode = brca_res$cases[1:20],
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
View(query_TCGA[[1]][[1]])
listSamples <- c("TCGA-E9-A1NG-11A-52R-A14M-07","TCGA-BH-A1FC-11A-32R-A13Q-07",
"TCGA-A7-A13G-11A-51R-A13Q-07","TCGA-BH-A0DK-11A-13R-A089-07",
"TCGA-E9-A1RH-11A-34R-A169-07","TCGA-BH-A0AU-01A-11R-A12P-07",
"TCGA-C8-A1HJ-01A-11R-A13Q-07","TCGA-A7-A13D-01A-13R-A12P-07",
"TCGA-A2-A0CV-01A-31R-A115-07","TCGA-AQ-A0Y5-01A-11R-A14M-07")
query <- GDCquery(project = "TCGA-BRCA",
data.category = "Gene expression",
data.type = "Gene expression quantification",
experimental.strategy = "RNA-Seq",
platform = "Illumina HiSeq",
file.type = "results",
barcode = listSamples,
legacy = TRUE)
GDCdownload(query = query)
tcga_data <-  GDCprepare(query)
tcga_data <-  GDCprepare(query)
dim(tcga_data)
GDCdownload(query)
BRCARnaseqSE <- GDCprepare(query)
BiocManager::install("TCGAbiolinks")
library("TCGAbiolinks")
GDCdownload(query)
tcga_data <- GDCprepare(query)
query <- GDCquery(project = "TCGA-BRCA",
data.category = "Gene expression",
data.type = "Gene expression quantification",
experimental.strategy = "RNA-Seq",
platform = "Illumina HiSeq",
file.type = "normalized_results",
barcode = listSamples,
legacy = TRUE)
GDCdownload(query)
tcga_data <- GDCprepare(query)
dim(tcga_data)
colnames(colData(tcga_data))
table(tcga_data@colData$vital_status)
table(tcga_data@colData$tumor_stage)
table(tcga_data@colData$paper_pathologic_stage)
load("C:/Users/brovo/Documents/BRCA.RData")
View(query_TCGA[[1]][[1]])
View(query_TCGA[[1]][[1]])
brca_res = getResults(query_TCGA)
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
platform = "Illumina Hiseq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification", #I had two parameters Expr and Slicing
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
tcga_data <-  GDCprepare(query_TCGA)
load("C:/Users/brovo/Documents/BRCA.RData")
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts",
sample.type = c("Primary solid Tumor", "Solid Tissue Normal"))
library("TCGAbiolinks")
library("limma")
library("edgeR")
library("glmnet")
library("factoextra")
library("FactoMineR")
library("caret")
library("SummarizedExperiment")
library("gplots")
library("survival")
library("survminer")
library("RColorBrewer")
library("gProfileR")
library("genefilter")
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts",
sample.type = c("Primary solid Tumor", "Solid Tissue Normal"))
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
GDCdownload(query = query_TCGA)
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
GDCdownload(query = query_TCGA)
tcga_data = GDCprepare(query_TCGA)
View(query_TCGA)
View(query_TCGA[[1]][[1]])
BiocManager::install("BioinformaticsFMRP/TCGAbiolinksGUI.data")
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
library("TCGAbiolinks")
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "HTSeq - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
query_TCGA = GDCquery(
project = "TCGA-LIHC",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
tcga_data = GDCprepare(query_TCGA)
query_TCGA = GDCquery(
project = "TCGA-OV",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
GDCdownload(query = query_TCGA)
tcga_data <-  GDCprepare(query_TCGA)
dim(tcga_data)
tcga_data <-  GDCprepare(query_TCGA)
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification", #I had two parameters Expr and Slicing
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
samplesDown <- getResults(query,cols=c("cases"))
samplesDown <- getResults(query_TCGA,cols=c("cases"))
dataSmTP <- TCGAquery_SampleTypes(barcode = samplesDown,
typesample = "TP")
dataSmNT <- TCGAquery_SampleTypes(barcode = samplesDown,
typesample = "NT")
dataSmTP_short <- dataSmTP[1:100]
dataSmNT_short <- dataSmNT[1:100]
barcode = c(dataSmTP_short, dataSmNT_short))
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
barcode = c(dataSmTP_short, dataSmNT_short))
GDCdownload(query = query_TCGA)
tcga_data <-  GDCprepare(query_TCGA)
dataPrep <- GDCprepare(query = query_TCGA,
save = TRUE,
save.filename = TBRCA)
BiocManager::install("BioinformaticsFMRP/TCGAbiolinksGUI.data")
library("TCGAbiolinks")
tcga_data <-  GDCprepare(query_TCGA)
library("TCGAbiolinks")
tcga_data <-  GDCprepare(query_TCGA)
View(query_TCGA)
View(query_TCGA)
View(query_TCGA[[1]][[1]])
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification",
sample.type = c("Primary Tumor", "Solid Tissue Normal"),
barcode = c(dataSmTP_short, dataSmNT_short))
GDCdownload(query = query_TCGA)
tcga_data <-  GDCprepare(query_TCGA)
query.exp.hg38 <- GDCquery(project = "TCGA-GBM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts",
barcode =  c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"))
GDCdownload(query.exp.hg38)
raw.counts <- GDCprepare(query = query.exp.hg38, summarizedExperiment = FALSE)
query.exp.hg38 <- GDCquery(project = "TCGA-GBM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "HTSeq - Counts",
barcode =  c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"))
query.exp.hg38 <- GDCquery(project = "TCGA-GBM",
data.category = "Transcriptome Profiling",
data.type = "Gene Expression Quantification",
workflow.type = "STAR - Counts",
barcode =  c("TCGA-14-0736-02A-01R-2005-01", "TCGA-06-0211-02A-02R-2005-01"))
GDCdownload(query.exp.hg38)
raw.counts <- GDCprepare(query = query.exp.hg38, summarizedExperiment = FALSE)
load("C:/Users/brovo/Documents/BRCA.RData")
query_TCGA = GDCquery(
project = "TCGA-BRCA",
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification", #I had two parameters Expr and Slicing
legacy = TRUE,
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
query_TCGA = GDCquery(
project = "TCGA-BRCA",
legacy = TRUE,
data.category = "Transcriptome Profiling", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification", #I had two parameters Expr and Slicing
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
query_TCGA = GDCquery(
project = "TCGA-BRCA",
legacy = TRUE,
data.category = "Gene expression", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene Expression Quantification", #I had two parameters Expr and Slicing
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
query_TCGA = GDCquery(
project = "TCGA-BRCA",
legacy = TRUE,
data.category = "Gene expression", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene expression quantification", #I had two parameters Expr and Slicing
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
View(query_TCGA)
query_TCGA = GDCquery(
project = "TCGA-BRCA",
legacy = TRUE,
data.category = "Gene expression", # parameter enforced by GDCquery
experimental.strategy = "RNA-Seq",
workflow.type = "STAR - Counts",
data.type = "Gene expression quantification", #I had two parameters Expr and Slicing
sample.type = c("Primary Tumor", "Solid Tissue Normal"))
load("C:/Users/brovo/YandexDisk-brov.olia/Bioinformatics/SC_env_2.RData")
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters",
fontsize = 7,
cluster_cols = F,
heatmap.colors = colors(50))
library(escape)
library(dittoSeq)
library(SingleCellExperiment)
library(Seurat)
library(SeuratObject)
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters",
fontsize = 7,
cluster_cols = F,
heatmap.colors = colors(50))
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters")
seurat <- Seurat::AddMetaData(seurat, ES.seurat)
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters",
fontsize = 7,
cluster_cols = F,
heatmap.colors = colors(50))
colors <- colorRampPalette(c("#0348A6", "#7AC5FF", "#C6FDEC", "#FFB433", "#FF4B20"))
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters",
fontsize = 7,
cluster_cols = F,
heatmap.colors = colors(50))
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters",
fontsize = 7,
cluster_cols = F,
heatmap.colors = colors(50))
dev.off()
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters",
fontsize = 7,
cluster_cols = F,
heatmap.colors = colors(50))
dittoHeatmap(seurat, genes = NULL, metas = names(ES.seurat),
annot.by = "seurat_clusters",
fontsize = 7,
cluster_cols = F,
cluster_within_group,
heatmap.colors = colors(50))
View(ES.seurat)
View(GS.hallmark)
getSignificance(ES.seurat, group = NULL, gene.sets = NULL, fit = NULL)
library(escape)
BiocManager::install("escape")
library(escape)
ES.seurat.sig <- getSignificance(ES.seurat, group = NULL, gene.sets = NULL, fit = NULL)
ES.seurat.sig <- getSignificance(ES.seurat, group = NULL, fit = NULL)
ES.seurat.sig <- getSignificance(ES.seurat, group = "seurat_clusters")
ES.seurat.sig <- getSignificance(ES.seurat)
saveRDS(ES.seurat,"./ES.seurat.rds")
saveRDS(seurat,"./seurat.rds")
test_data <- read.csv("https://stepic.org/media/attachments/course/524/test_data.csv", stringsAsFactors = F)
View(test_data)
most_significant <-  function(x){
print colnames(x) which.min(chisq.test(x)$p.value )
}
most_significant <-  function(x){
print colnames(x) which.min(chisq.test(x)$p.value )
}
chisq.test(test_data)
chisq.test(test_data$V1)
View(test_data)
chisq.test(test_data)$p.value
chisq.test(test_data$V1)
test_dats <- as.factor(test_data[, colnames(test_data)] )
test_data[] <- lapply(test_data, factor)
View(test_data)
chisq.test(test_data)$p.value
z <- apply( test_data, 2, chisq.test)
count(test_data$V1)
most_significant <-  function(x){
p_vals <- sapply(chisq.test(table(x))$p.value)
p_vals_min <- which(p_vals == min(p_vals))
p_vals_min_names <- names(p_vals_min)
}
most_significant(test_data)
most_significant(test_data)
most_significant(test_data)
table(test_data)
table(test_data)
chisq.test(table(test_data))$p.value
chisq.test(table(test_data$V1))$p.value
sapply(chisq.test(table(test_data))$p.value)
sapply(test_data, chisq.test(table(test_data))$p.value)
apply(test_data, 2, (table(test_data))$p.value)
apply(test_data, 2,table(test_data)$p.value)
x <- table(test_data)
apply( x, 2, chisq.test)
apply( x, 2, chisq.test$p.value)
most_significant <-  function(x){
fit3 <- apply(x, 2, function(x) chisq.test(table(x)))
}
most_significant(test_data)
most_significant(test_data)
most_significant(test_data)
most_significant(test_data)
most_significant(test_data)
iris
general <- sapply(mean(sepal[,1:4]))
general <- sapply(mean(iris[,1:4]))
general <- mean(iris[,1:4])
general <- mean(iris$Sepal.Length)
general <- mean(iris[,1:4])
iris[,1:4]
general <- colMeans(iris[,1:4])
t(iris)
iris <- iris[,1:4]
general <- colMeans(iris[,1:4])
row_more <- t(iris)>general
row_sum <- sum(row_more)
row_sum <- rowSums(row_more)
row_more <- t(t(iris)>general
row_sum <- rowSums(row_more)
}
general <- colMeans(iris[,1:4])
t(iris)
row_more <- t(t(iris)>general
row_sum <- rowSums(row_more)
}
general <- colMeans(iris[,1:4])
t(iris)
iris$important_cases <- factor(ifelse(row_sum>=3,"Yes","No"))}
iris <- iris[,1:4]
general <- colMeans(iris[,1:4])
row_more <- t(t(iris)>general
row_sum <- rowSums(row_more)
iris$important_cases <- factor(ifelse(row_sum>=3,"Yes","No"))
View(iris)
dat <- iris[, 1:4]
means <-colMeans(dat)
t_f <- t(t(dat)>means)
View(t_f)
library(readxl)
BMPR2 <- read_excel("C:/Bioinf/HSE/BMPR2.xlsx")
View(BMPR2)
View(BMPR2)
library(MetaboSignal)
install.packages("htmltools")
library(MetaboSignal)
install.packages("cli")
install.packages("cli")
library(MetaboSignal)
install.packages(c("cli", "clue", "colorspace", "data.table", "digest", "dplyr", "fansi", "ggrepel", "Matrix", "proj4", "Rcpp", "RCurl", "tibble", "utf8", "vctrs", "xfun"))
library(MetaboSignal)
install.packages(c("cli", "clue", "colorspace", "data.table", "digest", "dplyr", "fansi", "Matrix", "Rcpp", "RCurl", "tibble", "utf8", "vctrs", "xfun"))
library(MetaboSignal)
install.packages("cli")
library(MetaboSignal)
install.packages(c("cli", "clue", "colorspace", "data.table", "digest", "dplyr", "fansi", "Rcpp", "tibble", "utf8", "vctrs", "xfun"))
library(MetaboSignal)
install.packages("cli")
install.packages("cli")
library(cli)
remove.packages("cli", lib="~/R/win-library/4.1")
install.packages("cli")
install.packages("cli")
install.packages("cli")
library(MetaboSignal)
install.packages("dplyr")
library(MetaboSignal)
library(dplyr)
remove.packages("dplyr", lib="~/R/win-library/4.1")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
library(MetaboSignal)
library(vctrs)
remove.packages("vctrs", lib="~/R/win-library/4.1")
library(installr)
updateR()
updateR()
updateR()
library(installr)
library(pathview)
library(KEGGREST)
keggList("pathway","ath")
install.packages(c("cli", "rlang", "vctrs"))
setwd("C:/Users/brovo/source/repos/MicrobiomeGenomics")
install.packages('ProjectTemplate')
library('ProjectTemplate')
create.project('R_project_1')
